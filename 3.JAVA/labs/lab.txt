/// lab-1
// 1.1: Stewie
public class Stewie  {
	public static void main(String[] args) {
        System.out.println("//////////////////////");
        System.out.println("|| Victory is mine! ||");
        System.out.println("\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");
    }
}

// 1.2: Spikey
public class Spikey {
    public static void main(String[] args) {
        System.out.println("  \\/\n \\\\//\n\\\\\\///\n///\\\\\\\n //\\\\\n  /\\");
    }
}

// 1.3: WellFormed
public class WellFormed {
    public static void main(String[] args) {
        System.out.println("A well-formed Java program has");
        System.out.println("a main method with { and }");
        System.out.println("braces.");
        System.out.println("");
        System.out.println("A System.out.println statement");
        System.out.println("has ( and ) and usually a");
        System.out.println("String that starts and ends");
        System.out.println("with a \" character.");
        System.out.println("(But we type \\\" instead!)");
    }
}

// 1.4: Difference
public class Difference {
    public static void main(String arg[]) {
        System.out.print(
                "What is the difference between\na ' and a \"?  Or between a \" and a \\\"?\n\nOne is what we see when we're typing our program.\nThe other is what appears on the \"console.\"");
    }
}

// 1.5: MuchBetter
public class MuchBetter {
    public static void main(String arg[]) {
        System.out.print(
                "A \"quoted\" String is\n'much' better if you learn\nthe rules of \"escape sequences.\"\nAlso, \"\" represents an empty String.\nDon't forget: use \\\" instead of \" !\n'' is not the same as \"");
    }
}

// 1.6: Meta
public class Meta {
    public static void main(String[] args) {
        System.out.print(
                "public class Hello {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, world!\");\n    }\n}");
    }
}

// 1.7: Mantra
public class Mantra {
    public static void main(String[] args) {
        add();
        System.out.println();
        add();
    }

    public static void add() {
        System.out.println(
                "There's one thing every coder must understand:\nThe System.out.println command.");
    }
}

// 1.8: Stewie2
public class Stewie2 {
    public static void main(String[] args) {
        System.out.println("//////////////////////");
        for (int i = 0; i < 5; i++) {
            add();
        }
    }
    public static void add() {
        System.out.println("|| Victory is mine! ||");
        System.out.println("\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");
    }
}

// 1.9: Egg 
public class Egg {
    public static void main(String[] args) {
        System.out.println("  _______\n /       \\\n/         \\\n-\"-\'-\"-\'-\"-\n\\         /\n \\_______/");
    } 
}

//  1.10: Egg2
public class Egg2 {
    public static void main(String[] args) {
        top();
        bot();
        mid();
        top();
        bot();
        mid();
        bot();
        top();
        mid();
        bot();
    }
    public static void top() {
        System.out.println("  _______\n /       \\\n/         \\");
    }
    public static void bot() {
        System.out.println("\\         /\n \\_______/");
    }
    public static void mid() {
        System.out.println("-\"-'-\"-'-\"-");
    }
}

//  1.11: TwoRockets
public class TwoRockets {
    public static void main(String[] args) {
        top();
        mid1();
        mid2();
        mid1();
        top();
    }
    public static void top() {
        System.out.println("   /\\       /\\\n  /  \\     /  \\\n /    \\   /    \\");
    }
    public static void mid1() {
        System.out.println("+------+ +------+\n|      | |      |\n|      | |      |\n+------+ +------+");
    }
    public static void mid2() {
        System.out.println("|United| |United|\n|States| |States|");
    }
    
}

// 1.12: FightSong
public class FightSong {
    public static void main(String[] args) {
        go();
        System.out.println();
        goYougo();
        System.out.println();
        goYougo();
        System.out.println();
        go();
    }
    public static void go() {
        System.out.println("Go, team, go!\nYou can do it.");
    }
    public static void you() {
        System.out.println("You're the best,\nIn the West.");
    }
    public static void goYougo() {
                go();
                you();
        go();
    }
}

// 1.13: StarFigures
public class StarFigures {
    public static void main(String[] args) {
        twoLine();
        x();
        System.out.println();
        twoLine();
        x();
        twoLine();
        System.out.println();
        i();
        twoLine();
        x();
    }
    public static void twoLine() {
        System.out.println("*****\n*****");
    }
    public static void x() {
        System.out.println(" * *\n  *\n * *");
    }
    public static void i() {
        System.out.println("  *\n  *\n  *");
    }
}

// 1.14: Lanterns
public class Lanterns {
    public static void main(String[] args) {

        System.out.println("    *****\n  *********\n*************\n\n    *****\n  *********\n*************\n* | | | | | *\n*************\n    *****\n  *********\n*************\n\n    *****\n  *********\n*************\n    *****\n* | | | | | *\n* | | | | | *\n    *****\n    *****\n");

    }
}

// 1.15: EggStop
public class EggStop {
    public static void main(String[] args) {
        System.out.println("  ______\n /      \\\n/        \\\n\\        /\n \\______/\n\n  ______\n /      \\\n/        \\\n\\        /\n \\______/\n+--------+\n\n  ______\n /      \\\n/        \\\n|  STOP  |\n\\        /\n \\______/\n+--------+\n\n");
    }
}

// 1.16: Shining
public class Shining {
    public static void main(String[] args) {
        for (int i = 0; i < 1000; i++) {
            txt();
        }
    }
    public static void txt(){
        System.out.println("All work and no play makes Jack a dull boy.");
    }
}


/// lab-3
// 4.4: daysInMonth
public class lab {
    public static void main(String[] args) {
            System.out.print(daysInMonth(9));
        } 
    public static int daysInMonth(int month){
        if (month == 1 || month == 3 || month == 5 || month == 7 ||month == 8 || month == 10 || month == 12){
            return 31;
        }
        else if (month == 2) {
            return 28;
        } else {
             return 30;
        }
    }
}

// 4.13: colors
import java.util.Scanner;

public class lab {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("What color do you want? ");
        String color = input.nextLine();
        if (color.toUpperCase().equals("R")) {
            System.out.println("You have chosen Red.");
        } else if (color.toUpperCase().equals("G")) {
            System.out.println("You have chosen Green.");
        } else if (color.toUpperCase().equals("B")) {
            System.out.println("You have chosen Blue.");
        } else {
            System.out.println("Unknown color: " + color);
        }
    }
}


// 4.7: evenOdd
import java.util.Scanner;

public class lab {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("Type a number: ");
        int number = input.nextInt();
        if (number % 2 == 0) {
            System.out.println("even");
        } else {
            System.out.println("odd");
        }
    }
}

// 4.15: getGrade
import java.util.Scanner;

public class lab {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("Score: ");
        int score = input.nextInt();
        System.out.println("Grade: " + getGrade(score));
        input.close();
    }

    public static double getGrade(int score) {
        double grade = 0.8;
        if (score < 0 || score > 100) {
            throw new IllegalArgumentException();
        }
        if (score < 60) {
            grade = 0.0;
        } else if (score <= 62) {
            grade = 0.7;
        } else if (score >= 95) {
            grade = 4.0;
        } else {
            for (int i = 63; i < score; i++) {
                grade += 0.1;
            }
        }
        return grade;
    }
}

// 4.16: printPalindrome
import java.util.Scanner;

public class lab {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        printPalindrome(input);
        input.close();
    }

    public static void printPalindrome(Scanner input) {
        System.out.print("Type one or more words: ");
        String text = input.nextLine();
        if (text.toUpperCase().equals(new StringBuilder(text).reverse().toString().toUpperCase())) {
            System.out.print(text + " is a palindrome!");
        } else {
            System.out.print(text + " is not a palindrome.");
        }
    }
}

// 4.19: quadrant
import java.util.Scanner;

public class lab {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("x: ");
        double x = input.nextDouble();
        System.out.print("y: ");
        double y = input.nextDouble();
        System.out.println("Quadrant: " + quadrant(x, y));
        input.close();
    }

    public static int quadrant(double x, double y) {
        int quadrant = 0;
        if (!(x == 0 || y == 0)) {
            if (x * y > 0) {
                if (x > 0) {
                    quadrant = 1;
                } else {
                    quadrant = 3;
                }
            } else {
                if (x < 0) {
                    quadrant = 2;
                } else {
                    quadrant = 4;
                }
            }
        }
        return quadrant;
    }
}

// 4.20: numUnique
import java.util.Scanner;

public class lab {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("x: ");
        double x = input.nextDouble();
        System.out.print("y: ");
        double y = input.nextDouble();
        System.out.print("z: ");
        double z = input.nextDouble();
        System.out.println("Unique: " + numUnique(x, y, z));
        input.close();
    }

    public static int numUnique(double x, double y, double z) {
        int number = 3;
        if (x - y == 0) {
            number -= 1;
        }
        if (x - z == 0) {
            number -= 1;
        }
        if (y - z == 0) {
            number -= 1;
        }
        if (x == y && x == z) {
            number += 1;
        }
        return number;
    }
}

/// lab-4
//2.1: displacement
double s0 = 12.0;
double v0 = 3.5;
double a = 9.8;
double t = 10;

double s = s0 + v0 * t + 0.5 * a * Math.pow(t,2);
System.out.print(s);

//2.2: loopSquares
for(int i = 1; i<=10; i++){
    System.out.print((int) Math.pow(i,2)+" ");
}

// 2.3: fibonacci
public class lab {
    public static void main(String[] args) {
        int x1 = 0;
        int x2 = 1;
        int x = x1 + x2;
        for (int i = 0; i < 12; i++) {
            System.out.print(x + " ");
            // System.out.println("x:" + x + " x1:" + x1 + " " + "x2:" + x2);
            x = x1 + x2;
            x1 = x2;
            x2 = x;
        }
    }
}

// 2.4: starSquare
for (int i=0;i<4;i++){
 for (int j=0;j<5;j++){
     System.out.print("*");
 }
    System.out.print("\n");
}

// 2.5: starTriangle
for (int i=0;i<5;i++){
 for (int j=0;j<=i;j++){
     System.out.print("*");
 }
    System.out.print("\n");
}

// 2.6: numberTriangle
for (int i=1;i<=7;i++){
 for (int j=1;j<=i;j++){
     System.out.print(i);
 }
    System.out.print("\n");
}

// 2.7: spacedNumbers
for (int i=1;i<=5;i++){
 for (int j=5;j>i;j--){
     System.out.print(" ");
 }
    System.out.print(i+"\n");
}

// 2.8: spacesAndNumbers
for (int i=1;i<=5;i++){
 for (int j=4;j>=i;j--){
     System.out.print(" ");
 }
 for (int j=1;j<=i;j++){
     System.out.print(i);
 }  
    System.out.print("\n");
}

// 2.9: waveNumbers40
for (int i=1;i<=40;i++){
     System.out.print("-");
}
System.out.print("\n");
for (int j=1;j<=10;j++){
     System.out.print("_-^-");
}
System.out.print("\n");
for (int j = 1;j<=2;j++){
    for (int i=1;i<=9;i++){
         System.out.print(i+""+i);
    }
    System.out.print("00");
}
System.out.print("\n");
for (int i=1;i<=40;i++){
     System.out.print("-");
}

// 2.10: numbersOutput60
for (int i=1;i<=6;i++){
     System.out.print("         |");
}
System.out.print("\n");
for (int j=1;j<=6;j++){
     for (int i = 1;i<=10;i++){
         System.out.print(i%10);
     }
}

// lab-5
// 3.1: printNumbers
public class lab {
    public static void main(String[] args) {
        printNumbers(5);
        printNumbers(15);
    }

    public static void printNumbers(int num) {
        for (int i = 1; i <= num; i++) {
            System.out.print("[" + i + "] ");
        }
        System.out.println();
    }
}

// 3.2: printPowersOf2
public class lab {
    public static void main(String[] args) {
        printPowersOf2(3);
        printPowersOf2(10);
    }

    public static void printPowersOf2(int num) {
        for (int i = 0; i <= num; i++) {
            System.out.print((int) Math.pow(2, i) + " ");
        }
        System.out.println();
    }
}

// 3.3: printPowersOfN
public class lab {
    public static void main(String[] args) {
        printPowersOfN(4, 3);
        printPowersOfN(5, 6);
        printPowersOfN(-2, 8);
    }

    public static void printPowersOfN(int x, int y) {
        for (int i = 0; i <= y; i++) {
            System.out.print((int) Math.pow(x, i) + " ");
        }
        System.out.println();
    }
}
// 3.4: printSquare
public class lab {
    public static void main(String[] args) {
        // printSquare(1, 5);
        printSquare(3, 9);
        // printSquare(0, 3);
    }

    public static void printSquare(int x, int y) {
        for (int j = 0; j <= y - x; j++) {
            for (int i = 0; i <= y - x; i++) {
                int q = i + x + j;
                if (q > y) {
                    q = q - (y - x + 1);
                }
                System.out.print("" + q);
            }
            System.out.println();
        }
    }
}

// 3.5: printGrid
public class lab {
    public static void main(String[] args) {
        printGrid(3, 6);
        // printGrid(5, 5);
        // printGrid(4, 1);
    }

    public static void printGrid(int x, int y) {
        for (int j = 1; j <= x; j++) {
            System.out.print(j);
            for (int i = 1; i < y; i++) {
                System.out.print(", " + (j + i * x));
            }
            System.out.println();
        }
    }
}

// 3.6: largerAbsVal
public class lab {
    public static void main(String[] args) {
        System.out.println(largerAbsVal(3, 6));
    }

    public static int largerAbsVal(int x, int y) {
        return Math.max(Math.abs(x), Math.abs(y));
    }
}

// 3.7: largestAbsVal
public class lab {
    public static void main(String[] args) {
        System.out.println(largestAbsVal(7, -2, -11));
    }

    public static int largestAbsVal(int x, int y, int z) {
        return Math.max(Math.abs(x), Math.max(Math.abs(y), Math.abs(z)));
    }
}

// 3.8: quadratic
public class lab {
    public static void main(String[] args) {
        quadratic(1, -7, 12);
    }

    public static void quadratic(int a, int b, int c) {
        double x1 = (-b + Math.sqrt(Math.pow(b, 2) - 4 * a * c)) / (2 * a);
        double x2 = (-b - Math.sqrt(Math.pow(b, 2) - 4 * a * c)) / (2 * a);
        System.out.println("First root = " + x1);
        System.out.println("Second root = " + x2);
    }
}

// 3.9: lastDigit
public class lab {
    public static void main(String[] args) {
        System.out.println(lastDigit(3572));
    }

    public static int lastDigit(int x) {
        return Math.abs(x % 10);
    }
}

// 3.10: area
public class lab {
    public static void main(String[] args) {
        System.out.println(area(2.0));
    }

    public static double area(double x) {
        return Math.pow(x, 2) * Math.PI;
    }
}

// 3.13: pay
public class lab {
    public static void main(String[] args) {
        System.out.println(pay(4.0, 11));
    }

    public static double pay(double x, double y) {
        if (y <= 8) {
            return x * y;
        } else {
            return x * 8 + x * 1.5 * (y - 8);
        }
    }
}

// 3.14: cylinderSurfaceArea
public class lab {
    public static void main(String[] args) {
        System.out.println(cylinderSurfaceArea(3.0, 4.5));
    }

    public static double cylinderSurfaceArea(double x, double y) {
        return 2 * Math.PI * Math.pow(x, 2) + 2 * Math.PI * x * y;
    }
}

// 3.15: sphereVolume
public class lab {
    public static void main(String[] args) {
        System.out.println(sphereVolume(2.0));
    }

    public static double sphereVolume(double x) {
        return Math.PI * Math.pow(x, 3) * 4 / 3;
    }
}

// 3.16: triangleArea
public class lab {
    public static void main(String[] args) {
        System.out.println(triangleArea(8.0, 5.2, 7.1));
    }

    public static double triangleArea(double x, double y, double z) {
        double s = (x + y + z) / 2;
        return Math.sqrt(s * (s - x) * (s - y) * (s - z));
    }
}

// 3.17: padString
public class lab {
    public static void main(String[] args) {
        System.out.println(padString("hello", 8));
        System.out.println(padString("congratulations", 10));
    }

    public static String padString(String a, int x) {
        String s = "";
        if (a.length() < x) {
            for (int i = 0; i < x - a.length(); i++) {
                s += " ";
            }
        }
        return s + a;
    }
}

// 3.18: vertical
public class lab {
    public static void main(String[] args) {
        System.out.println();
        vertical("hey now")
    }

    public static void vertical(String a) {
        String s = "";
        for (int i = 0; i < a.length(); i++) {
            s += a.charAt(i) + "\n";
        }
        System.out.println(s);
    }
}

// 3.19: printReverse 
public class lab {
    public static void main(String[] args) {
        System.out.println();
        printReverse("hey now");
    }

    public static void printReverse(String a) {
        String s = "";
        for (int i = a.length() - 1; i >= 0; i--) {
            s += a.charAt(i);
        }
        System.out.println(s);
    }
}

// 3.20: inputBirthday 
import java.util.Scanner;

public class lab {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        inputBirthday(input);
        input.close();
    }

    public static void inputBirthday(Scanner input) {
        System.out.print("On what day of the month were you born? ");
        int day = input.nextInt();
        System.out.print("What is the name of the month in which you were born? ");
        String month = input.next();
        System.out.print("During what year were you born? ");
        int year = input.nextInt();
        System.out.print("You were born on " + month + " " + day + ", " + year + ". You're mighty old!");
    }
}

// 3.21: processName 
import java.util.Scanner;

public class lab {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        processName(input);
        input.close();
    }

    public static void processName(Scanner input) {
        System.out.print("Please enter your full name: ");
        String fname = input.next();
        String lname = input.next();
        System.out.print("Your name in reverse order is " + lname + ", " + fname);
    }
}

// 3.22: TheNameGameExercise
import java.util.Scanner;

public class TheNameGame {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("What is your name? "); 
        String first = input.next(); 
        String last = input.next();
        String newFirst = first.substring(1);
        String newLast = last.substring(1);

        playGame(first, newFirst);
        System.out.println();
        playGame(last, newLast);
    }

    public static void playGame(String name, String nn) {
        System.out.println(name + " " + name + ", " + "bo-B" + nn);
        System.out.println("Banana-fana fo-F" + nn);
        System.out.println("Fee-fi-mo-M" + nn);
        System.out.println(name.toUpperCase() + "!");
    }

// lab-6
// 7.1: lastIndexOf
public class lab {
    public static void main(String[] args) {
        int[] arr = { 74, 85, 102, 99, 101, 85, 56 };
        System.out.println(lastIndexOf(arr, 85));
    }

    public static int lastIndexOf(int[] arr, int index) {
        for (int i = arr.length - 1; i >= 0; i--) {
            if (arr[i] == index) {
                return i;
            }
        }
        return -1;
    }
}
import java.lang.reflect.Array;

// 7.2: range
public class lab {
    public static void main(String[] args) {
        int[] arr = { 74, 85, 102, 99, 101, 85, 56 };
        System.out.println(range(arr));
    }

    public static int range(int[] arr) {
        int max = arr[0], min = arr[0];
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
            if (arr[i] < min) {
                min = arr[i];
            }
        }
        return max - min + 1;
    }
}

// 7.3: countInRange
public class lab {
    public static void main(String[] args) {
        int[] arr = { 14, 1, 22, 17, 36, 7, -43, 5 };
        System.out.println(countInRange(arr, 4, 17));
    }

    public static int countInRange(int[] arr, int min, int max) {
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            if ((arr[i] >= min) && (arr[i] <= max)) {
                count++;
            }
        }
        return count;
    }
}

// 7.4: isSorted
public class lab {
    public static void main(String[] args) {
        // double[] arr = { 16.1, 12.3, 22.2, 14.4 };
        double[] arr = { 1.5, 4.3, 7.0, 19.5, 25.1, 46.2 };
        System.out.println(isSorted(arr));
    }

    public static boolean isSorted(double[] arr) {
        double temp = arr[0];
        for (int i = 1; i < arr.length; i++) {
            if (temp <= arr[i]) {
                temp = arr[i];
            } else {
                return false;
            }
        }
        return true;
    }
}

// 7.5: mode
public class lab {
    public static void main(String[] args) {
        int[] arr = { 27, 15, 15, 11, 27 };
        System.out.println(mode(arr));
    }

    public static int mode(int[] arr) {
        int mostRepeat = arr[0];
        int max = 1;
        for (int i = 0; i < arr.length; i++) {
            int temp = 0;
            for (int j = 0; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    temp++;
                }
            }
            if (temp == max && mostRepeat > arr[i]) {
                mostRepeat = arr[i];
            } else if (temp > max) {
                max = temp;
                mostRepeat = arr[i];
            }
        }
        return mostRepeat;
    }
}

// 7.6: stdev
public class lab {
    public static void main(String[] args) {
        int[] arr = { 1, -2, 4, -4, 9, -6, 16, -8, 25, -10 };
        System.out.println(stdev(arr));
    }

    public static double stdev(int[] arr) {
        double average = 0;
        double deviation = 0;

        for (int i = 0; i < arr.length; i++) {
            average += arr[i];
        }
        System.out.println(average);
        average /= arr.length;
        System.out.println(average);
        for (int i = 0; i < arr.length; i++) {
            deviation += Math.pow((arr[i] - average), 2);
        }
        deviation = Math.sqrt(deviation / (arr.length - 1));
        return deviation;
    }
}

// 7.7: kthLargest
import java.util.Arrays;

public class lab {
    public static void main(String[] args) {
        int[] arr = { 74, 85, 102, 99, 101, 56, 84 };
        System.out.println(kthLargest(2, arr));
    }

    public static int kthLargest(int numOrder, int[] arr) {
        Arrays.sort(arr);   
        return arr[arr.length - numOrder - 1] ;
    }
}

// 7.8: median
import java.util.Arrays;

public class lab {
    public static void main(String[] args) {
        // int[] arr = { 5, 2, 4, 17, 55, 4, 3, 26, 18, 2, 17 };
        int[] arr = { 42, 37, 1, 97, 1, 2, 7, 42, 3, 25, 89, 15, 10, 29, 27 };
        System.out.println(median(arr));
    }

    public static int median(int[] arr) {
        Arrays.sort(arr);
        return arr[arr.length / 2];
    }
}

// 7.9: minGap
public class lab {
    public static void main(String[] args) {
        // int[] arr = { 5, 2, 4, 17, 55, 4, 3, 26, 18, 2, 17 };
        int[] arr = { 1, 3, 6, 7, 12 };
        System.out.println(minGap(arr));
    }

    public static int minGap(int[] arr) {
        int min = 0;
        if (arr.length > 2) {
            min = arr[1] - arr[0];
            for (int i = 1; i < arr.length - 1; i++) {
                if (min > (arr[i + 1] - arr[i])) {
                    min = arr[i + 1] - arr[i];
                }
            }
        }
        return min;
    }
}

// 7.10: percentEven 
public class lab {
    public static void main(String[] args) {
        // int[] arr = { 5, 2, 4, 17, 55, 4, 3, 26, 18, 2, 17 };
        int[] arr = { 6, 2, 9, 11, 3 };
        System.out.println(percentEven(arr));
    }

    public static double percentEven(int[] arr) {
        if (arr.length > 0) {
            int evenAmount = 0;
            for (int i = 0; i < arr.length; i++)
                if (arr[i] % 2 == 0) {
                    evenAmount += 1;
                }
            return ((double) evenAmount / arr.length) * 100;
        }
        return 0.0;
    }
}

// 7.11: isUnique 
public class lab {
    public static void main(String[] args) {
        // int[] arr = { 1, 2, 0, 2, 3, 5, 1 };
        int[] arr = { 1, 2, 4, 3, 5, 7, 9 };
        System.out.println(isUnique(arr));
    }

    public static boolean isUnique(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            int temp = 0;
            for (int j = 0; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    temp = temp + 1;
                    if (temp > 1) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
}

// 7.12: priceIsRight 
public class lab {
    public static void main(String[] args) {
        // int[] arr = { 1, 2, 0, 2, 3, 5, 1 };
        int[] arr = { 200, 300, 250, 999, 40 };
        System.out.println(priceIsRight(arr, 280));
    }

    public static int priceIsRight(int[] arr, int price) {
        int closest = -1;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] <= price && arr[i] > closest) {
                closest = arr[i];
            }
        }
        return closest;
    }
}

// 7.13: longestSortedSequence 
public class lab {
    public static void main(String[] args) {
        // int[] arr = { 1, 2, 0, 2, 3, 5, 1 };
        int[] arr = { 3, 8, 10, 1, 9, 14, -3, 0, 14, 207, 56, 98, 12 };
        System.out.println(longestSortedSequence(arr));
    }

    public static int longestSortedSequence(int[] arr) {
        int longest = 0;
        for (int i = 0; i < arr.length; i++) {
            int temp = 1;
            for (int j = 0; j < arr.length - (i + 1); j++) {
                if (arr[i + j] <= arr[i + j + 1]) {
                    temp += 1;
                } else {
                    if (temp > longest) {
                        longest = temp;
                    }
                    temp = 1;
                }
            }
            if (temp > longest) {
                longest = temp;
            }
        }
        return longest;
    }
}

// 7.14: contains 
public class lab {
    public static void main(String[] args) {
        int[] arr1 = {1, 2, 1, 2, 3};
        int[] arr2 = {1, 2, 3};
        // int[] arr1 = {1, 2, 1};
        // int[] arr2 = {1, 2, 2, 2, 5, 7, 9, 9, 9};
        System.out.println(contains(arr1, arr2));
    }

    public static boolean contains(int[] arr1, int[] arr2) {
        int temp = 0;
        int[] longerArr = arr1;
        int[] shorterArr = arr2;
        if (arr2.length > arr1.length) {
            longerArr = arr2;
            shorterArr = arr1;
        }
        System.out.println("shorterArr " +shorterArr.length);
        System.out.println("longerArr " +longerArr.length);
        for (int i = 0; i < longerArr.length; i++) {
            System.out.println("i " + i + " temp " + temp);
            if (longerArr[i] == shorterArr[temp]) {
                temp++;
            } 
            else {
                temp = 0;
                // Check again when reset temp 
                if (longerArr[i] == shorterArr[temp]) {
                  temp++;
                }
            }
            if (temp == shorterArr.length) {
                return true;
            }
        }
    return false;
    }
}